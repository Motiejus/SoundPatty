### What is this ###
Efficient and fast sound (i.e. record) recognition software.

### Where can You use it ###
You can listen to live radio station and log how many your advertisements are played per day
You can scan your music library for multiple recordings
You can match special operator messages when trying to initiate a VoIP call (for example, "phone is out of radio coverage")

### USAGE ###
Let's kick an example:
	wget http://www.nch.com.au/acm/8k16bitpcm.wav -O sample.wav
This is our sample (imagine advertisment) we will try to find in our "stream".
	make -s && ./main sample.cfg sample.wav > samplefile.txt
This creates the treshold file.
Then you have three options to provide "stream" to SoundPatty:
Simple WAV:
	./main config.cfg samplefile.txt catch_me.wav
Jack (single port):
	$ mplayer -ao jack:name=mp 
		(in another console)
	$ ./main config.cfg samplefile.txt jack mp:out_0
A third option - for automatic port capturing (when you want jack channel to be "hooked" automatically)
	$ ./controller
See controller.h for configuration and constants (this has to be re-written, of course)
Third option is suitable for VoIP. You need just to open the Jack port with callee (caller) audio and SoundPatty will do everyting else for you :-)

### TODO ###
Major:
* Launch system scripts instead of printfing FOUND or NOT FOUND
* Make input type dependent on Input sub-class (unsigned int for Wav, jack_default_audio_t for Jack, other for other)
* Test and substitute map<int, Range>::equal_range in SoundPatty::do_checking, performance cost now. O(n) instead of O(log n)
* Test with -O2

Somewhen:
* Remove Jack dependencies where it is not nescesarry (ex. finding samples in WAV files should not need jack.h and pthreads)
* Make shared libary out of "Soundpatty" and "{Jack,Wav}Input" classes instead of making system calls from controller
* Clean-up Makefile or probably move to WAF.
* Make the main matching algorithm based on tree (somehow). This would improve efficiency in "capturing".
* Normal, configurable input arguments for main and controller.
