### What is this ###
Efficient and fast sound (i.e. record) recognition software.

### Where can You use it ###
You can listen to live radio station and log how many your advertisements are played per day
You can scan your music library for multiple recordings
You can match special operator messages when trying to initiate a VoIP call (for example, "phone is out of radio coverage")

### Compiling ###
./waf configure; ./waf build
Configures and builds the package
./waf install
Installs to current (source directory), so launch it bravely.

### USAGE ###
Let's see an example:
    ./waf configure test
This downloads sample.wav and catch_me.wav. sample.wav is a sample we want to capture
in a catch_me.wav stream. Listen to both wavs and it will be clearer :)

SoundPatty now supports Wav (PCM 16-bit) and Jack inputs. You can try jack like this:
Jack (single port):
	$ mplayer -ao jack:name=mp 
		(in another console)
	$ ./main config.cfg samplefile.txt jack mp:out_0
Third option - for automatic port capturing (when you want jack channel to be "hooked" automatically)
	$ ./controller
See controller.h for configuration and constants.
Third option is suitable for VoIP. You need just to open the Jack port with callee (caller)
    audio and SoundPatty will do everyting else for you :-)

### TODO ###
Major:
* Test and substitute map<int, Range>::equal_range in SoundPatty::do_checking, performance cost now. O(n) instead of O(log n)
* Make Input classes codec-independent (probably using libsox)

Somewhen:
* Normal, configurable input arguments for main and controller.
* Make the main matching algorithm based on tree (somehow). This would improve efficiency in "capturing".
